---
// import { openProp } from '@/store/index.ts';

interface Props {
  open: boolean;
}

const { open } = Astro.props;
---

<!-- Store the message prop as a data attribute. -->
<astro-modal-l data-open>
  <div
    id="modal"
    class="modal"
    role="dialog"
    aria-labelledby="modalTitle"
    aria-describedby="modalDescription"
    aria-hidden="false"
  >
    <div class="modal-content">
      <button id="closeModalBtn" class="close-btn" aria-label="Close Modal">
        &times;
      </button>
      <h2 id="dialog_label">
        <slot name="headline" />
      </h2>
      <p id="modalDescription">
        This is a description of the modal content. Here you can place any
        content you like.
      </p>
    </div>
  </div>
</astro-modal-l>

<script>
  // import { isOpen } from '@/store/index.ts';

  // Define the behaviour for our new type of HTML element.
  class AstroModal extends HTMLElement {
    // A getter/setter for an open property.
    get open() {
      return this.hasAttribute('open');
    }

    set open(val) {
      const modal = this.querySelector('[role="dialog"]');
      // Reflect the value of the open property as an HTML attribute.
      if (val) {
        //  this.setAttribute('open', true);
        modal && modal?.setAttribute('class', 'modal');
      } else {
        modal && modal?.setAttribute('class', 'visually-hidden');

        // this.removeAttribute('open');
      }
      this.toggleDrawer();
    }

    // A getter/setter for a disabled property.
    // get disabled() {
    //   return this.hasAttribute('disabled');
    // }

    // set disabled(val) {
    //   // Reflect the value of the disabled property as an HTML attribute.
    //   if (val) {
    //     this.setAttribute('disabled', '');
    //   } else {
    //     this.removeAttribute('disabled');
    //   }
    // }

    constructor() {
      super();

      // const modal = this.querySelector('[role="dialog"]');
      const closeModalBtn = this.querySelector('#closeModalBtn');
      closeModalBtn && closeModalBtn?.addEventListener('click', closeModal);

      isOpen.subscribe((_open) => {
        if (_open) {
          this.open = true;
        } else {
          this.open = false;
          // document.getElementById('dialog').style.display = 'none';
        }
      });
    }

    toggleDrawer() {
      // ...
    }
  }

  customElements.define('astro-modal-l', AstroModal);
</script>

<style define:vars={{ isOpen }}>
  .modal {
    width: 100%;
    height: 100%;
    background-color: red;
    display: block;
    position: fixed;
    top: 0;
    left: 0;
    bottom: 0;
    z-index: 2;
  }
</style>
